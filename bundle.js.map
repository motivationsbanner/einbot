{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cards/card.ts","webpack:///./src/cards/color.ts","webpack:///./src/actions/playCardAction.ts","webpack:///./src/actions/playerAction.ts","webpack:///./src/cards/directionCard.ts","webpack:///./src/cards/drawCard.ts","webpack:///./src/cards/numberCard.ts","webpack:///./src/cards/skipCard.ts","webpack:///./src/cards/wildCard.ts","webpack:///./src/cards/wildCardDraw.ts","webpack:///./src/index.ts","webpack:///./src/game.ts","webpack:///./src/stacks/drawStack.ts","webpack:///./src/cards/value.ts","webpack:///./src/stacks/gameStack.ts","webpack:///./src/actions/invalidActionException.ts","webpack:///./src/gui/gameBoard.ts","webpack:///./src/loggers/simpleHTMLLogger.ts","webpack:///./src/loggers/logger.ts","webpack:///./src/players/basicPlayer.ts","webpack:///./src/actions/passAction.ts","webpack:///./src/players/player.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Card","toString","Color","PlayCardAction","_super","card","_this","this","__extends","PlayerAction","card_1","color_1","DirectionCard","color","isPlayable","topCard","castedCard","onPlay","game","switchDirection","DrawCard","addDrawCards","NumberCard","SkipCard","skipPlayer","WildCard","BLUE","setColor","WildDrawCard","game_1","gameBoard_1","simpleHTMLLogger_1","basicPlayer_1","logger","SimpleHTMLLogger","document","querySelector","players","BasicPlayer","Game","info","mute","startGame","unmute","playerStatistic","GameBoard","playCardAction_1","drawStack_1","gameStack_1","drawStack","DrawStack","gameStack","GameStack","running","activePlayerIndex","direction","drewCard","skip","drawCards","automaticRun","_i","_a","length","player","addCardsToStack","hand","addCardsToDrawStack","initialize","draw","_b","_c","j","push","logInfo","join","playTurn","getDrawStackSize","amount","action","currentPlayer","play","currentPlayerDrawCard","index","indexOf","splice","addCard","wins","games","endTurn","output","playerName","printPlayerStatistic","isRunning","text","directionCard_1","drawCard_1","numberCard_1","skipCard_1","value_1","wildCard_1","wildCardDraw_1","createCards","shuffle","cards","pop","concat","ii","Math","floor","random","Value","ZERO","invalidActionException_1","undefined","InvalidActionException","keepOneCard","Error","container","ORIGINAL_CARD_WIDTH","ORIGINAL_CARD_HEIGHT","defaultSettings","canvasHeight","canvasWidth","cardsImage","Image","factor","canvas","createElement","height","width","context","getContext","appendChild","addEventListener","renderGameState","id","window","setInterval","clearInterval","src","clearRect","y","drawCardAt","x","coords","getCardsImageCoordinates","drawImage","element","muted","message","createTextNode","scrollTop","scrollHeight","Logger","error","passAction_1","PassAction","Player"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","import { Game } from \"../game\";\r\nimport { Color } from \"./color\";\r\n\r\n/**\r\n * the base-class for all card-types\r\n */\r\nexport abstract class Card {\r\n  public color: Color;\r\n  /**\r\n   * test whether a card can get played or not\r\n   * @param topCard the card which is on top of the stack\r\n   */\r\n  public abstract isPlayable(topCard: Card): boolean;\r\n\r\n  public toString(): string {\r\n    return \"Card\";\r\n  }\r\n\r\n  public abstract onPlay(game: Game): void;\r\n}\r\n","export enum Color {\r\n  RED, YELLOW, GREEN, BLUE,\r\n}\r\n","import { Card } from \"../cards/card\";\r\nimport { PlayerAction } from \"./playerAction\";\r\n\r\n/**\r\n * pass, e.g. the current Player will draw 1 Card from the\r\n * playstack and the he will end their turn\r\n */\r\nexport class PlayCardAction extends PlayerAction {\r\n  constructor(public card: Card) {\r\n    super();\r\n  }\r\n}\r\n","/**\r\n * an action taken by a player\r\n */\r\nexport abstract class PlayerAction { }\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class DirectionCard extends Card {\r\n  constructor(public color: Color) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    if (!(topCard instanceof Card)) {\r\n      return false;\r\n    }\r\n\r\n    const castedCard = topCard as Card;\r\n    return this.color === castedCard.color ||\r\n      topCard instanceof DirectionCard;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" Direction Card\";\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n    game.switchDirection();\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class DrawCard extends Card {\r\n  constructor(public color: Color) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    if (!(topCard instanceof Card)) {\r\n      return false;\r\n    }\r\n\r\n    const castedCard = topCard as Card;\r\n    return this.color === castedCard.color ||\r\n      topCard instanceof DrawCard;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" Draw Card\";\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n    game.addDrawCards(2);\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\nimport { Value } from \"./value\";\r\n\r\n/**\r\n * a basic card with a number and a color\r\n * the name \"Value\" is used because \"Number\" is reserved\r\n */\r\nexport class NumberCard extends Card {\r\n  constructor(public color: Color, public value: Value) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    if (!(topCard instanceof Card)) {\r\n      return false;\r\n    }\r\n\r\n    const castedCard = topCard as NumberCard;\r\n    return this.color === castedCard.color ||\r\n      topCard instanceof NumberCard &&\r\n      this.value === castedCard.value;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" \" + this.value;\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n   return;\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class SkipCard extends Card {\r\n  constructor(public color: Color) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    if (!(topCard instanceof Card)) {\r\n      return false;\r\n    }\r\n\r\n    const castedCard = topCard as Card;\r\n    return this.color === castedCard.color ||\r\n      topCard instanceof SkipCard;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" Skip Card\";\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n    game.skipPlayer();\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class WildCard extends Card {\r\n  constructor(public color: Color = Color.BLUE) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    return true;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" Wild Card\";\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n   return;\r\n  }\r\n\r\n  public setColor(color: Color): void {\r\n    this.color = color;\r\n   }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Card } from \"./card\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class WildDrawCard extends Card {\r\n  constructor(public color: Color = Color.BLUE) {\r\n    super();\r\n  }\r\n\r\n  public isPlayable(topCard: Card): boolean {\r\n    return true;\r\n  }\r\n\r\n  public toString(): string {\r\n    return Color[this.color] + \" Wild Draw Card\";\r\n  }\r\n\r\n  public onPlay(game: Game): void {\r\n   game.addDrawCards(4);\r\n  }\r\n\r\n  public setColor(color: Color): void {\r\n    this.color = color;\r\n   }\r\n}\r\n","import { Game } from \"./game\";\r\nimport { GameBoard } from \"./gui/gameBoard\";\r\nimport { SimpleHTMLLogger } from \"./loggers/simpleHTMLLogger\";\r\nimport { BasicPlayer } from \"./players/basicPlayer\";\r\nimport { Player } from \"./players/player\";\r\n\r\n// creates logger\r\nconst logger = new SimpleHTMLLogger(document.querySelector(\".log\"));\r\n\r\n// adds an array with 1 passingPlayer\r\nconst players: Player[] = [\r\n  new BasicPlayer(\"basicPlayer1\"),\r\n  new BasicPlayer(\"basicPlayer2\"),\r\n  new BasicPlayer(\"basicPlayer3\"),\r\n  new BasicPlayer(\"basicPlayer4\"),\r\n];\r\n\r\n// creates a new game\r\nconst game: Game = new Game(players, logger);\r\n\r\n// run 1000 games\r\nlogger.info(\"running 1000 games\");\r\nlogger.mute();\r\nfor (let i: number = 0; i < 1000; i++) {\r\n  game.startGame(true);\r\n}\r\nlogger.unmute();\r\n\r\nlogger.info(game.playerStatistic);\r\n\r\n// visualize a single game\r\nlogger.info(\"visualizing a game\");\r\nconst gameBoard = new GameBoard(game, document.querySelector(\".board\"));\r\n","import { PlayCardAction } from \"./actions/playCardAction\";\r\nimport { PlayerAction } from \"./actions/playerAction\";\r\nimport { Card } from \"./cards/card\";\r\nimport { Logger } from \"./loggers/logger\";\r\nimport { Player } from \"./players/player\";\r\nimport { DrawStack } from \"./stacks/drawStack\";\r\nimport { GameStack } from \"./stacks/gameStack\";\r\n\r\nexport class Game {\r\n  private drawStack: DrawStack = new DrawStack();\r\n  private gameStack: GameStack = new GameStack();\r\n  private running: boolean = false;\r\n  private activePlayerIndex: number = 0;\r\n  private direction: boolean = false;\r\n  private drewCard: boolean = false;\r\n  private skip: boolean = false;\r\n  private drawCards: number = 0;\r\n\r\n  /**\r\n   * create a new game\r\n   * @param players the players\r\n   * @param logger the logger (default: no logger)\r\n   */\r\n  constructor(public players: Player[], private logger: Logger = null) { }\r\n\r\n  /**\r\n   * all cards are put into the drawstack\r\n   * each player draws 7 cards and then it starts the game\r\n   * the parameter automaticRun makes it possible if the game should run automatically\r\n   * or if you want to step through each turn individually\r\n   * it returns the log of this game\r\n   */\r\n  public startGame(automaticRun: boolean): void {\r\n    this.direction = false;\r\n    this.drewCard = false;\r\n    this.skip = false;\r\n    this.drawCards = 0;\r\n\r\n    // adds all the cards that the players have on  their hands to the draw pile\r\n    for (const player of this.players) {\r\n      this.drawStack.addCardsToStack(player.hand);\r\n      player.hand = [];\r\n    }\r\n\r\n    // add all cards from the gameStack to the drawStack\r\n    this.gameStack.addCardsToDrawStack(this.drawStack, false);\r\n\r\n    // add one card to the gameStack\r\n    this.gameStack.initialize(this.drawStack.draw());\r\n\r\n    // give each player 7 cards\r\n    for (const player of this.players) {\r\n      for (let j: number = 0; j < 7; j++) {\r\n        player.hand.push(this.drawStack.draw());\r\n      }\r\n    }\r\n\r\n    this.running = true;\r\n    this.logInfo(\"Starting the game with the following Players: \" + this.players.join(\", \"));\r\n\r\n    // game loop it loops as runs as long as the game is running\r\n    while (this.running && automaticRun) {\r\n      this.playTurn();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the size of the drawStack\r\n   */\r\n  public getDrawStackSize(): number {\r\n    return this.drawStack.length;\r\n  }\r\n\r\n  /**\r\n   * get the topcard of the gamestack\r\n   */\r\n  public get topCard(): Card {\r\n    return this.gameStack.topCard;\r\n  }\r\n\r\n  public switchDirection(): void {\r\n    this.direction = !this.direction;\r\n  }\r\n\r\n  public addDrawCards(amount: number): void {\r\n    this.drawCards += amount;\r\n  }\r\n\r\n  /**\r\n   * this function plays exactly one turn\r\n   * one turn means that one player starts it and he then ends it\r\n   * a turn can have more than one actions from a player\r\n   */\r\n  public playTurn(): void {\r\n    const action: PlayerAction = this.currentPlayer.play(this);\r\n    while (this.drawCards > 0) {\r\n      this.currentPlayerDrawCard();\r\n      this.drawCards--;\r\n    }\r\n    if (action instanceof PlayCardAction) {\r\n      // TODO: checks if the card can be played\r\n\r\n      const index = this.currentPlayer.hand.indexOf(action.card, 0);\r\n      if (index > -1) {\r\n        this.currentPlayer.hand.splice(index, 1);\r\n      }\r\n\r\n      this.gameStack.addCard(action.card);\r\n      action.card.onPlay(this);\r\n      this.logInfo(this.currentPlayer + \" played a \" + action.card);\r\n      // check if this player has no more cards in their hand which means he won\r\n      if (this.currentPlayer.hand.length === 0) {\r\n        this.running = false;\r\n        this.logInfo(this.currentPlayer + \" won\");\r\n        this.currentPlayer.wins++;\r\n        for (const player of this.players) {\r\n          player.games++;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (this.currentPlayer.hand.length === 1) {\r\n        this.logInfo(this.currentPlayer + \" UNO\");\r\n      }\r\n\r\n      // it ends the turn\r\n      this.logInfo(this.currentPlayer + \" ended their turn\");\r\n      this.endTurn();\r\n    } else {\r\n      // if the player hasnt drawn a card yet\r\n      if (!this.drewCard) {\r\n        // the player draws a card from the draw stack\r\n        this.currentPlayerDrawCard();\r\n        this.playTurn();\r\n      } else {\r\n        this.logInfo(this.currentPlayer + \" ended their turn\");\r\n        this.endTurn();\r\n      }\r\n    }\r\n  }\r\n\r\n  public get playerStatistic(): string {\r\n    let output: string = \"\";\r\n    for (const player of this.players) {\r\n      output = output + player.playerName + \" Games: \" + player.games + \" Wins: \" + player.wins + \"\\n\";\r\n    }\r\n    return output;\r\n  }\r\n\r\n  public printPlayerStatistic(): void {\r\n    this.logInfo(this.playerStatistic);\r\n  }\r\n\r\n  public skipPlayer(): void {\r\n    this.endTurn();\r\n  }\r\n\r\n  public isRunning(): boolean {\r\n    return this.running;\r\n  }\r\n\r\n  private currentPlayerDrawCard(): void {\r\n    // check if there are cards in the draw stack\r\n    if (this.getDrawStackSize() === 0) {\r\n      this.gameStack.addCardsToDrawStack(this.drawStack, true);\r\n    }\r\n    this.currentPlayer.hand.push(this.drawStack.draw());\r\n    this.drewCard = true;\r\n    this.logInfo(this.currentPlayer + \" drew a card \"\r\n      + this.currentPlayer.hand[this.currentPlayer.hand.length - 1]);\r\n  }\r\n\r\n  /**\r\n   * get the current player\r\n   */\r\n  private get currentPlayer(): Player {\r\n    return this.players[this.activePlayerIndex];\r\n  }\r\n\r\n  /**\r\n   * log some information\r\n   * @param text the text to log\r\n   */\r\n  private logInfo(text: string): void {\r\n    if (this.logger !== null) {\r\n      this.logger.info(text);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * it changes the Position of the activePlayerIndex depending in which direction\r\n   * the game is currently being played\r\n   */\r\n  private endTurn(): void {\r\n    this.drewCard = false;\r\n\r\n    if (this.direction) {\r\n      this.activePlayerIndex++;\r\n    } else {\r\n      this.activePlayerIndex += this.players.length - 1;\r\n    }\r\n\r\n    this.activePlayerIndex %= this.players.length;\r\n  }\r\n}\r\n","import { Card } from \"../cards/card\";\r\nimport { Color } from \"../cards/color\";\r\nimport { DirectionCard } from \"../cards/directionCard\";\r\nimport { DrawCard } from \"../cards/drawCard\";\r\nimport { NumberCard } from \"../cards/numberCard\";\r\nimport { SkipCard } from \"../cards/skipCard\";\r\nimport { Value } from \"../cards/value\";\r\nimport { WildCard } from \"../cards/wildCard\";\r\nimport { WildDrawCard } from \"../cards/wildCardDraw\";\r\n\r\n/**\r\n * this class represents the drawStack\r\n */\r\nexport class DrawStack {\r\n  private cards: Card[];\r\n\r\n  constructor() {\r\n    this.createCards();\r\n    this.shuffle();\r\n  }\r\n\r\n  /**\r\n   * draw the card on the top\r\n   */\r\n  public draw(): Card {\r\n    return this.cards.pop();\r\n  }\r\n\r\n  /**\r\n   * adds an array of cards onto the drawstack\r\n   * @param cards an array of cards to be added to the stack\r\n   */\r\n  public addCardsToStack(cards: Card[]): void {\r\n    this.cards = this.cards.concat(cards);\r\n  }\r\n\r\n  /**\r\n   * amount of cards in the stack\r\n   */\r\n  public get length(): number {\r\n    return this.cards.length;\r\n  }\r\n\r\n  /**\r\n   * shuffle the deck\r\n   */\r\n  public shuffle(): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n      const ii = Math.floor(Math.random() * (this.length - i)) + i;\r\n      [this.cards[i], this.cards[ii]] = [this.cards[ii], this.cards[i]];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * create the initial deck\r\n   * this includes the following cards:\r\n   * + 2 of every number-card\r\n   */\r\n  private createCards(): void {\r\n    this.cards = [];\r\n\r\n    for (let color = 0; color < 4; color++) {\r\n      for (let value = 1; value < 10; value++) {\r\n        for (let i = 0; i < 2; i++) {\r\n          this.cards.push(new NumberCard(color as Color, value as Value));\r\n        }\r\n      }\r\n      for (let i = 0; i < 2; i++) {\r\n        this.cards.push(new DrawCard(color as Color));\r\n        this.cards.push(new SkipCard(color as Color));\r\n        this.cards.push(new DirectionCard(color as Color));\r\n      }\r\n      this.cards.push(new NumberCard(color as Color, Value.ZERO));\r\n      this.cards.push(new WildCard(color as Color));\r\n      this.cards.push(new WildDrawCard(color as Color));\r\n    }\r\n  }\r\n}\r\n","export enum Value {\r\n  ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,\r\n}\r\n","import { InvalidActionException } from \"../actions/invalidActionException\";\r\nimport { Card } from \"../cards/card\";\r\nimport { DrawStack } from \"./drawStack\";\r\n\r\n/**\r\n * this stack contains the cards which got played\r\n */\r\nexport class GameStack {\r\n  private cards: Card[] = [];\r\n\r\n  public initialize(topCard: Card): void {\r\n    this.cards = [topCard];\r\n  }\r\n\r\n  /**\r\n   * add a card on top of the stack; an InvalidActionException gets\r\n   * thrown if the card can not get played\r\n   * @param card the card to add\r\n   */\r\n  public addCard(card: Card): void {\r\n    if (this.cards === undefined || this.topCard === undefined) {\r\n      throw new InvalidActionException(\"the gameStack didn't get initialized\");\r\n    }\r\n\r\n    if (!card.isPlayable(this.topCard)) {\r\n      throw new InvalidActionException(card + \" can not get played on top of \"\r\n        + this.topCard);\r\n    }\r\n\r\n    this.cards.push(card);\r\n  }\r\n\r\n  /**\r\n   * get the amount of cards in the stack\r\n   */\r\n  public get length(): number {\r\n    return this.cards.length;\r\n  }\r\n\r\n  /**\r\n   * get the top card\r\n   */\r\n  public get topCard(): Card {\r\n    return this.cards[this.cards.length - 1];\r\n  }\r\n\r\n  /**\r\n   * remove all cards but one and add them to a drawStack\r\n   * and then shuffle the drawStack\r\n   * @param drawStack the drawStacks to add the cards to\r\n   * @param keepOneCard whether or to keep the top card on the stack\r\n   */\r\n  public addCardsToDrawStack(drawStack: DrawStack, keepOneCard: boolean = true): void {\r\n    drawStack.addCardsToStack(this.cards.splice(0, this.length - (keepOneCard ? 1 : 0)));\r\n    drawStack.shuffle();\r\n  }\r\n}\r\n","/**\r\n * this action gets thrown whenever a player does something\r\n * which is not allowed/possible\r\n */\r\nexport class InvalidActionException extends Error { }\r\n","import { Card } from \"../cards/card\";\r\nimport { DirectionCard } from \"../cards/directionCard\";\r\nimport { DrawCard } from \"../cards/drawCard\";\r\nimport { NumberCard } from \"../cards/numberCard\";\r\nimport { SkipCard } from \"../cards/skipCard\";\r\nimport { WildCard } from \"../cards/wildCard\";\r\nimport { WildDrawCard } from \"../cards/wildCardDraw\";\r\nimport { Game } from \"../game\";\r\n\r\n/**\r\n * visiualize the uno gamestate\r\n */\r\nexport class GameBoard {\r\n  private ORIGINAL_CARD_WIDTH = 240;\r\n  private ORIGINAL_CARD_HEIGHT = 360;\r\n\r\n  private defaultSettings = {\r\n    canvasHeight: 80 * 4,\r\n    canvasWidth: 1280,\r\n  };\r\n\r\n  private cardsImage: HTMLImageElement = new Image();\r\n  private context: CanvasRenderingContext2D;\r\n\r\n  private factor: number = 0.2;\r\n\r\n  constructor(game: Game, container: HTMLElement) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.height = this.defaultSettings.canvasHeight;\r\n    canvas.width = this.defaultSettings.canvasWidth;\r\n    this.context = canvas.getContext(\"2d\");\r\n\r\n    container.appendChild(canvas);\r\n\r\n    this.cardsImage.addEventListener(\"load\", () => {\r\n      game.startGame(false);\r\n\r\n      this.renderGameState(game);\r\n\r\n      const id = window.setInterval(() => {\r\n        game.playTurn();\r\n        this.renderGameState(game);\r\n\r\n        if (!game.isRunning()) {\r\n          window.clearInterval(id);\r\n        }\r\n      }, 500);\r\n    });\r\n\r\n    this.cardsImage.src = \"images/cards.svg\";\r\n  }\r\n\r\n  public renderGameState(game: Game) {\r\n    this.context.clearRect(0, 0, this.defaultSettings.canvasWidth,\r\n      this.defaultSettings.canvasHeight);\r\n\r\n    let y = 0;\r\n\r\n    this.drawCardAt(0, 0, game.topCard);\r\n    this.drawCardAt(0, 80, null);\r\n\r\n    for (const player of game.players) {\r\n      let x = 70;\r\n\r\n      for (const card of player.hand) {\r\n        this.drawCardAt(x, y, card);\r\n        x += 40;\r\n      }\r\n\r\n      y += 80;\r\n    }\r\n  }\r\n\r\n  private drawCardAt(x: number, y: number, card: Card): void {\r\n    const coords = this.getCardsImageCoordinates(card);\r\n\r\n    this.context.drawImage(\r\n      /* image */ this.cardsImage,\r\n      /* position in src */ coords.x * this.ORIGINAL_CARD_WIDTH, coords.y * this.ORIGINAL_CARD_HEIGHT,\r\n      /* dimensions in src */ this.ORIGINAL_CARD_WIDTH + 2, this.ORIGINAL_CARD_HEIGHT + 2,\r\n      /* position in dest */ x, y,\r\n      /* dimensions in dest */this.ORIGINAL_CARD_WIDTH * this.factor, this.ORIGINAL_CARD_HEIGHT * this.factor);\r\n  }\r\n\r\n  private getCardsImageCoordinates(card: Card): { x: number, y: number } {\r\n    if (card instanceof NumberCard) {\r\n      return { x: (card as NumberCard).value, y: card.color };\r\n    }\r\n\r\n    if (card instanceof SkipCard) {\r\n      return { x: 10, y: card.color };\r\n    }\r\n\r\n    if (card instanceof DirectionCard) {\r\n      return { x: 11, y: card.color };\r\n    }\r\n\r\n    if (card instanceof DrawCard) {\r\n      return { x: 12, y: card.color };\r\n    }\r\n\r\n    if (card instanceof WildCard) {\r\n      return { x: 13, y: 0 };\r\n    }\r\n\r\n    if (card instanceof WildDrawCard) {\r\n      return { x: 13, y: 4 };\r\n    }\r\n    return { x: 0, y: 4 };\r\n  }\r\n}\r\n","import { Logger } from \"./logger\";\r\n\r\n/**\r\n * log information to a HTML element\r\n */\r\nexport class SimpleHTMLLogger extends Logger {\r\n  private muted: boolean = false;\r\n\r\n  /**\r\n   * constructor\r\n   * @param element the container for the log messages\r\n   */\r\n  constructor(private element: HTMLElement) {\r\n    super();\r\n  }\r\n\r\n  public mute(): void {\r\n    this.muted = true;\r\n  }\r\n\r\n  public unmute(): void {\r\n    this.muted = false;\r\n  }\r\n\r\n  public info(message: string): void {\r\n    if (!this.muted) {\r\n      this.element.appendChild(document.createTextNode(message + \"\\n\"));\r\n      this.element.scrollTop = this.element.scrollHeight;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * abstract base class for loggers\r\n */\r\nexport abstract class Logger {\r\n  /**\r\n   * log information\r\n   * @param message the message to log\r\n   */\r\n  public info(message: string): void { /* do nothing by default */ }\r\n\r\n  /**\r\n   * log an error\r\n   * @param message the message to log\r\n   */\r\n  public error(message: string): void { /* do nothing by default */ }\r\n}\r\n","import { PassAction } from \"../actions/passAction\";\r\nimport { PlayCardAction } from \"../actions/playCardAction\";\r\nimport { PlayerAction } from \"../actions/playerAction\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"./player\";\r\n/**\r\n * the basicplayer allways plays the first card if he can else he passes\r\n */\r\nexport class BasicPlayer extends Player {\r\n  /**\r\n   * this Function is used to make the player do stuff\r\n   * @param game give the current game as a parameter\r\n   */\r\n  public play(game: Game): PlayerAction {\r\n    for (const card of this.hand) {\r\n      // plays a card if he can\r\n      if (card.isPlayable(game.topCard)) {\r\n        return new PlayCardAction(card);\r\n      }\r\n    }\r\n    return new PassAction();\r\n  }\r\n}\r\n","import { PlayerAction } from \"./playerAction\";\r\n\r\n/**\r\n * pass, e.g. the current Player will draw 1 Card from the\r\n * playstack and the he will end their turn\r\n */\r\nexport class PassAction extends PlayerAction { }\r\n","import { PlayerAction } from \"../actions/playerAction\";\r\nimport { Card } from \"../cards/card\";\r\nimport { Game } from \"../game\";\r\n\r\nexport abstract class Player {\r\n  public hand: Card[] = [];\r\n  public wins: number = 0;\r\n  public games: number = 0;\r\n  constructor(private name: string) {\r\n  }\r\n  /**\r\n   * this Function is used to make the player do stuff\r\n   * @param game give the current game as a parameter\r\n   */\r\n  public abstract play(game: Game): PlayerAction;\r\n\r\n  public get playerName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.playerName;\r\n  }\r\n}\r\n"],"sourceRoot":""}